package com.umar.simply.jdbc.fluent.dao.contract;

import com.umar.simply.jdbc.fluent.dao.QueryService;
import com.umar.simply.jdbc.dml.operations.SelectOp;
import com.umar.simply.jdbc.meta.Column;
import com.umar.simply.jdbc.meta.ColumnValue;
import com.umar.simply.jdbc.meta.Index;
import com.umar.simply.jdbc.meta.Table;

import java.util.List;
import com.umar.simply.jdbc.ResultSetMapper;

public interface FluentQueryService<T> {
    QueryService<T> ALL();
    QueryService<T> ALL(List<String> aliases);
    QueryService<T> FROM(Table table);
    QueryService<T> WHERE();
    QueryService<T> WHERE(Column<?> column);
    QueryService<T> VALUES(List<ColumnValue<?>> values);
    QueryService<T> COLUMN(List<Column<?>> columns);
    QueryService<T> COLUMN(Column<T> column);
    QueryService<T> EQ(List<ColumnValue<?>> columnValues);
    QueryService<T> NE(Column<T> condition);
    QueryService<T> NOT();
    QueryService<T> IS();
    QueryService<T> NULL();
    QueryService<T> AND();
    QueryService<T> AND(Column<T> column);
    QueryService<T> OR();
    QueryService<T> GT();
    QueryService<T> LT();
    QueryService<T> GE();
    QueryService<T> EQ(Column<?> condition);
    QueryService<T> EQ();
    QueryService<T> EQ(ColumnValue<?> value);
    QueryService<T> EQ(String condition);
    QueryService<T> GT(ColumnValue<?> value);
    QueryService<T> LT(ColumnValue<?> value);
    QueryService<T> GE(ColumnValue<?> columnValue);
    QueryService<T> LE(ColumnValue<?> columnValue);
    QueryService<T> UPPER();
    QueryService<T> HAVING();
    QueryService<T> FROM(List<Table> tables);
    QueryService<T> YEAR(Column<?> column);
    QueryService<T> DISTINCT();
    QueryService<T> DISTINCT(Column<?> column);
    QueryService<T> COUNT(Column<?> column);
    QueryService<T> COUNT(SelectOp op);
    QueryService<T> MAX(Column<?> column);
    QueryService<T> MIN(Column<?> column);
    QueryService<T> AVG(Column<?> column);
    QueryService<T> SUM(Column<?> column);
    QueryService<T> EXISTS(SelectOp op);
    QueryService<T> BETWEEN(List<ColumnValue<?>> columnValues);
    QueryService<T> BETWEEN(SelectOp op);
    QueryService<T> LIKE(String pattern);
    QueryService<T> IN(SelectOp op);
    QueryService<T> IN(List<ColumnValue<?>> columnValues);
    QueryService<T> LIMIT(int n);
    QueryService<T> OFFSET(int n);
    QueryService<T> AS(String alias);
    QueryService<T> AS(SelectOp op);
    QueryService<T> ORDER_BY(Column<?> column);
    QueryService<T> ORDER_BY();
    QueryService<T> ASC();
    QueryService<T> DESC();
    QueryService<T> GROUP_BY(List<Column<?>> columns);
    QueryService<T> GROUP_BY(Column<?> column);
    QueryService<T> GROUP_WITH(List<Column<?>> columns);
    QueryService<T> GROUP_WITH(Column<?> column);
    QueryService<T> USING(Column<?> column);
    QueryService<T> MINUS();
    QueryService<T> INNER();
    QueryService<T> JOIN();
    QueryService<T> JOIN(Table table);
    QueryService<T> JOIN(SelectOp query);
    QueryService<T> LEFT();
    QueryService<T> RIGHT();
    QueryService<T> UNION();
    QueryService<T> ON();
    QueryService<T> ON(Column<?> column);
    QueryService<T> ANY();
    QueryService<T> SOME();
    QueryService<T> SELECT(Column<?> column);
    QueryService<T> TABLE(Table table);
    QueryService<T> SELECT(List<Column<?>> columns);
    QueryService<T> SELECT();
    QueryService<T> withIndex(Index index);
    QueryService<T> WITH(String alias);
    List<?> execute();
    QueryService<T> using(ResultSetMapper<T> rowMapper);
    SelectOp getSQL();
}
